"""
This code generates a header with precomputed tables for  the chess engine. So far, it generates possible moves for 
knights and kings on each of the 64 squares of the board, and magic bitboards for sliding pieces. 
"""
from pathlib import Path

def generate_knight_moves():
    deltas = [
        (2, 1), (1, 2), (-1, 2), (-2, 1),
        (-2, -1), (-1, -2), (1, -2), (2, -1)
    ]

    return generate_offset_moves("knight", deltas)

def generate_king_moves():
    deltas = [
        (-1, -1), (-1, 0), (-1, 1),
        ( 0, -1),          ( 0, 1),
        ( 1, -1), ( 1, 0), ( 1, 1),
    ]

    return generate_offset_moves("king", deltas)

def generate_offset_moves(piece, deltas):
    all_moves = []
    for sq in range(64):
        moves = 0
        rank = sq // 8
        file = sq % 8
        for dr, df in deltas:
            r = rank + dr
            f = file + df
            if 0 <= r < 8 and 0 <= f < 8:
                to_sq = r * 8 + f
                moves |= 1 << to_sq
        all_moves.append(moves)
    return format_c_array([f"0x{n:016X}ULL" for n in all_moves], f"{piece}_moves", "uint64_t", True)


def format_c_array(array, name, type, static=True):
    code = f"{'static ' if static else ''}{type} {name}[{len(array)}] = {{"
    for i, item in enumerate(array):
        code += f"\n{' '*4}{item}{',' if i != len(array) - 1 else ''}"
    code += "\n};"

    return code


code = f"""// Header of various precomputed tables generated by generate_tables.py
#ifndef TABLES_H
#define TABLES_H

#include <stdint.h>

{generate_knight_moves()}

{generate_king_moves()}

#endif // TABLES_H
"""


with open((Path(__file__).parent / "tables.h").as_posix(), "w") as f:
    f.write(code)